generator client {
  provider = "prisma-client-js"
  previewFeatures = ["uncheckedScalarInputs"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Archive {
  id          Int       @id @default(autoincrement())
  product_id  Int
  location_id Int
  customer_id Int?
  supplier_id Int?
  date        DateTime
  quantity    Int
  comment     String?
  created_by  Int
  created_at  DateTime?
  updated_at  DateTime?
  users       User      @relation("archivesTousers", fields: [created_by], references: [id])
  customers   Customer? @relation("archivesTocustomers", fields: [customer_id], references: [id])
  locations   Location  @relation("archivesTolocations", fields: [location_id], references: [id])
  products    Product   @relation("archivesToproducts", fields: [product_id], references: [id])
  suppliers   Supplier? @relation("archivesTosuppliers", fields: [supplier_id], references: [id])

  @@index([created_by], name: "archives_created_by_foreign")
  @@index([customer_id], name: "archives_customer_id_foreign")
  @@index([location_id], name: "archives_location_id_foreign")
  @@index([product_id], name: "archives_product_id_foreign")
  @@index([supplier_id], name: "archives_supplier_id_foreign")
  @@map("archives")
}

model Customer {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  khmer       String?          @unique
  status      customers_status @default(active)
  created_at  DateTime?
  updated_at  DateTime?
  archives    Archive[]        @relation("archivesTocustomers")
  inventories Inventory[]
  invoices    invoices[]       @relation("customersToinvoices")

  @@map("customers")
}

model Inventory {
  id            Int             @id @default(autoincrement())
  product_id    Int
  location_id   Int
  customer_id   Int?
  supplier_id   Int?
  date          DateTime
  quantity      Int
  comment       String?
  created_by    Int
  created_at    DateTime?
  updated_at    DateTime?       @updatedAt
  deleted_at    DateTime?
  user          User            @relation(fields: [created_by], references: [id])
  customer      Customer?       @relation(fields: [customer_id], references: [id])
  location      Location        @relation(fields: [location_id], references: [id])
  product       Product         @relation(fields: [product_id], references: [id])
  supplier      Supplier?       @relation(fields: [supplier_id], references: [id])
  invoice_items invoice_items[] @relation("inventoriesToinvoice_items")

  @@index([created_by], name: "inventories_created_by_foreign")
  @@index([customer_id], name: "inventories_customer_id_foreign")
  @@index([location_id], name: "inventories_location_id_foreign")
  @@index([product_id], name: "inventories_product_id_foreign")
  @@index([supplier_id], name: "inventories_supplier_id_foreign")
  @@map("inventories")
}

model Location {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  status      locations_status @default(active)
  created_at  DateTime?
  updated_at  DateTime?
  archives    Archive[]        @relation("archivesTolocations")
  inventories Inventory[]

  @@map("locations")
}

model Product {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  khmer             String          @unique
  low_stock_warning Int             @default(dbgenerated())
  status            products_status @default(active)
  created_at        DateTime?
  updated_at        DateTime?
  archives          Archive[]       @relation("archivesToproducts")
  inventories       Inventory[]
  prices            prices[]        @relation("pricesToproducts")

  @@map("products")
}

model Supplier {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  khmer       String?          @unique
  status      suppliers_status @default(active)
  created_at  DateTime?
  updated_at  DateTime?
  archives    Archive[]        @relation("archivesTosuppliers")
  inventories Inventory[]

  @@map("suppliers")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String
  email         String      @unique
  password      String
  api_token     String?     @unique
  registered_at DateTime?
  created_at    DateTime?
  updated_at    DateTime?
  archives      Archive[]   @relation("archivesTousers")
  inventories   Inventory[]
  invoices      invoices[]  @relation("invoicesTousers")
  prices        prices[]    @relation("pricesTousers")

  @@map("users")
}

model invoice_items {
  id           Int       @id @default(autoincrement())
  invoice_id   Int
  inventory_id Int
  unit_id      Int
  price_USD    Float?
  price_riel   Int?
  created_at   DateTime?
  updated_at   DateTime?
  deleted_at   DateTime?
  inventories  Inventory @relation("inventoriesToinvoice_items", fields: [inventory_id], references: [id])
  invoices     invoices  @relation(fields: [invoice_id], references: [id])
  units        units     @relation(fields: [unit_id], references: [id])

  @@index([inventory_id], name: "invoice_items_inventory_id_foreign")
  @@index([invoice_id], name: "invoice_items_invoice_id_foreign")
  @@index([unit_id], name: "invoice_items_unit_id_foreign")
}

model invoices {
  id                  Int             @id @default(autoincrement())
  date                DateTime
  status              invoices_status @default(active)
  customer_id         Int?
  customer_name_no_id String?
  notes               String?
  draft_items         Json?
  paid_at             DateTime?
  created_by          Int
  created_at          DateTime?
  updated_at          DateTime?
  deleted_at          DateTime?
  users               User            @relation("invoicesTousers", fields: [created_by], references: [id])
  customers           Customer?       @relation("customersToinvoices", fields: [customer_id], references: [id])
  invoice_items       invoice_items[]

  @@index([created_by], name: "invoices_created_by_foreign")
  @@index([customer_id], name: "invoices_customer_id_foreign")
}

model prices {
  id             Int       @id @default(autoincrement())
  product_id     Int
  unit_id        Int
  effective_date DateTime
  price_USD      Float?
  price_riel     Int?
  created_by     Int
  created_at     DateTime?
  updated_at     DateTime?
  users          User      @relation("pricesTousers", fields: [created_by], references: [id])
  products       Product   @relation("pricesToproducts", fields: [product_id], references: [id])
  units          units     @relation(fields: [unit_id], references: [id])

  @@unique([product_id, unit_id, effective_date], name: "prices_product_id_unit_id_effective_date_unique")
  @@index([created_by], name: "prices_created_by_foreign")
  @@index([unit_id], name: "prices_unit_id_foreign")
}

model units {
  id            Int             @id @default(autoincrement())
  amount        Float
  unit          units_unit
  status        units_status    @default(active)
  created_at    DateTime?
  updated_at    DateTime?
  invoice_items invoice_items[]
  prices        prices[]

  @@unique([amount, unit], name: "units_amount_unit_unique")
}

enum customers_status {
  active
  inactive
}

enum locations_status {
  active
  inactive
}

enum products_status {
  active
  inactive
}

enum suppliers_status {
  active
  inactive
}

enum invoices_status {
  draft
  active
}

enum units_unit {
  g
  kg
  tonne
  mL
  L
}

enum units_status {
  active
  inactive
}
